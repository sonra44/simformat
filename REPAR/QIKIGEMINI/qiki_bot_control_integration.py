"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π QIKI
"""

import asyncio
import numpy as np
from typing import Optional

from bot_control import BotController, ControlMode, ControlState
from logger import Logger


class QikiBotControlIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π QIKI.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∞–≥–µ–Ω—Ç–æ–º.
    """
    
    def __init__(self, agent=None, physics=None, simulation=None):
        self.logger = Logger.get_logger("qiki_bot_control")
        self.agent = agent
        self.physics = physics
        self.simulation = simulation
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞
        self.bot_controller = BotController(agent=agent, physics=physics)
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_active = False
        self.manual_override = False
        
        self.logger.info("QikiBotControlIntegration initialized")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        try:
            await self.bot_controller.start()
            self.is_active = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            asyncio.create_task(self._integration_loop())
            
            self.logger.info("Bot control system started")
            self._show_startup_info()
            
        except Exception as e:
            self.logger.error(f"Failed to start bot control: {e}")
    
    def _show_startup_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        print("\\n" + "="*60)
        print("ü§ñ QIKI BOT CONTROL SYSTEM ACTIVE")
        print("="*60)
        print("Available control methods:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        for interface in self.bot_controller.active_interfaces:
            interface_name = interface.__class__.__name__
            if "Keyboard" in interface_name:
                print("  ‚å®Ô∏è  Keyboard Control - Use WASD, IJKL for movement")
            elif "Text" in interface_name:
                print("  üí¨ Text Commands - Type commands like 'forward', 'goto 10 5 15'")
            elif "Touch" in interface_name:
                print("  üì± Touch Control - Virtual joystick available")
        
        print("\\nCurrent mode: AUTONOMOUS (use 'manual' command to switch)")
        print("Emergency stop: Press X or type 'emergency'")
        print("="*60 + "\\n")
    
    async def _integration_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - —Å–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º.
        """
        while self.is_active:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                control_state = self.bot_controller.get_control_state()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                if control_state.emergency_stop and self.agent:
                    self.agent.emergency_stop = True
                    if self.simulation:
                        self.simulation._running = False
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–æ–≤
                if control_state.mode == ControlMode.MANUAL:
                    if self.agent and self.agent.autonomous:
                        self.agent.autonomous = False
                        self.manual_override = True
                        self.logger.info("Switched to MANUAL control")
                
                elif control_state.mode == ControlMode.AUTONOMOUS:
                    if self.agent and not self.agent.autonomous:
                        self.agent.autonomous = True
                        self.manual_override = False
                        self.logger.info("Switched to AUTONOMOUS control")
                
                # –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é
                if self.manual_override and self.physics:
                    await self._apply_manual_control(control_state)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(0.02)  # 50 Hz
                
            except Exception as e:
                self.logger.error(f"Integration loop error: {e}")
                await asyncio.sleep(0.1)
    
    async def _apply_manual_control(self, control_state: ControlState):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É –æ–±—ä–µ–∫—Ç—É.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            physics_state = self.physics.get_state()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—è–≥—É (—Å–∏–ª—ã)
            if np.any(control_state.thrust_vector):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ —Å–∏–ª—ã
                force = control_state.thrust_vector * self.physics.mass * 2.0  # –£—Å–∏–ª–µ–Ω–∏–µ
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                self.physics.apply_force(force)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ (–º–æ–º–µ–Ω—Ç—ã)
            if np.any(control_state.torque_vector):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã —É–≥–ª–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –º–æ–º–µ–Ω—Ç—ã
                torque = control_state.torque_vector * 10.0  # –£—Å–∏–ª–µ–Ω–∏–µ
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–º–µ–Ω—Ç
                self.physics.apply_torque(torque)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞
            if control_state.target_position is not None and self.agent:
                self.agent.target = control_state.target_position
            
        except Exception as e:
            self.logger.error(f"Error applying manual control: {e}")
    
    def get_control_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not self.is_active:
            return {"status": "inactive"}
        
        control_state = self.bot_controller.get_control_state()
        
        return {
            "status": "active",
            "mode": control_state.mode.name,
            "manual_override": self.manual_override,
            "emergency_stop": control_state.emergency_stop,
            "last_command": control_state.last_command_time,
            "thrust_vector": control_state.thrust_vector.tolist(),
            "torque_vector": control_state.torque_vector.tolist(),
            "active_interfaces": len(self.bot_controller.active_interfaces),
            "command_history_size": len(self.bot_controller.command_history)
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.is_active = False
        self.bot_controller.stop()
        self.logger.info("Bot control integration stopped")
