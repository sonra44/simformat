"""
QIKI Bot Control System - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
======================================================

–°–∏—Å—Ç–µ–º–∞ –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (Android, Windows, Linux)
- –†–µ–∂–∏–º–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä—É—á–Ω–æ–π/–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π/—Å–º–µ—à–∞–Ω–Ω—ã–π)
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ root-–ø—Ä–∞–≤
- –ö–æ–º–∞–Ω–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
- –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∂–æ–π—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

–ê–≤—Ç–æ—Ä: QIKI Project Team
–í–µ—Ä—Å–∏—è: 1.0
"""

import asyncio
import sys
import os
import time
import threading
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from enum import Enum, auto
from typing import Dict, Any, List, Optional
import numpy as np

from logger import Logger
from config import config


class ControlMode(Enum):
    """–†–µ–∂–∏–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."""
    AUTONOMOUS = auto()    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π
    MANUAL = auto()        # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    ASSISTED = auto()      # –ê—Å—Å–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    MIXED = auto()         # –°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º


class CommandType(Enum):
    """–¢–∏–ø—ã –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    # –î–≤–∏–∂–µ–Ω–∏–µ
    MOVE_FORWARD = auto()
    MOVE_BACKWARD = auto()
    MOVE_LEFT = auto()
    MOVE_RIGHT = auto()
    MOVE_UP = auto()
    MOVE_DOWN = auto()
    
    # –í—Ä–∞—â–µ–Ω–∏–µ
    TURN_LEFT = auto()
    TURN_RIGHT = auto()
    PITCH_UP = auto()
    PITCH_DOWN = auto()
    ROLL_LEFT = auto()
    ROLL_RIGHT = auto()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    GOTO_POSITION = auto()
    FOLLOW_TARGET = auto()
    ORBIT_TARGET = auto()
    HOVER = auto()
    LAND = auto()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ
    EMERGENCY_STOP = auto()
    RESET_POSITION = auto()
    CHANGE_MODE = auto()
    CALIBRATE = auto()


@dataclass
class ControlCommand:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    command_type: CommandType
    parameters: Dict[str, Any] = field(default_factory=dict)
    timestamp: float = field(default_factory=time.time)
    priority: int = 0  # 0 = –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    duration: Optional[float] = None  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    source: str = "unknown"  # –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã


@dataclass
class ControlState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    mode: ControlMode = ControlMode.AUTONOMOUS
    is_active: bool = True
    last_command_time: float = 0.0
    manual_override: bool = False
    emergency_stop: bool = False
    
    # –¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    thrust_vector: np.ndarray = field(default_factory=lambda: np.zeros(3))
    torque_vector: np.ndarray = field(default_factory=lambda: np.zeros(3))
    
    # –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    target_position: Optional[np.ndarray] = None
    target_velocity: Optional[np.ndarray] = None
    target_attitude: Optional[np.ndarray] = None


class InputInterface(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥."""
    
    @abstractmethod
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞."""
        pass
    
    @abstractmethod
    async def get_command(self) -> Optional[ControlCommand]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        pass
    
    @abstractmethod
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞."""
        pass


class KeyboardInterface(InputInterface):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–¥–ª—è Desktop)."""
    
    def __init__(self):
        self.logger = Logger.get_logger("keyboard_interface")
        self.command_queue = asyncio.Queue()
        self.running = False
        self.input_thread = None
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞–≤–∏—à
        self.key_mapping = {
            # WASD –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
            'w': (CommandType.MOVE_FORWARD, {}),
            's': (CommandType.MOVE_BACKWARD, {}),
            'a': (CommandType.MOVE_LEFT, {}),
            'd': (CommandType.MOVE_RIGHT, {}),
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            'q': (CommandType.MOVE_UP, {}),
            'e': (CommandType.MOVE_DOWN, {}),
            
            # –í—Ä–∞—â–µ–Ω–∏–µ (—Å—Ç—Ä–µ–ª–∫–∏)
            'j': (CommandType.TURN_LEFT, {}),
            'l': (CommandType.TURN_RIGHT, {}),
            'i': (CommandType.PITCH_UP, {}),
            'k': (CommandType.PITCH_DOWN, {}),
            'u': (CommandType.ROLL_LEFT, {}),
            'o': (CommandType.ROLL_RIGHT, {}),
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            'h': (CommandType.HOVER, {}),
            'r': (CommandType.RESET_POSITION, {}),
            'x': (CommandType.EMERGENCY_STOP, {}),
            'm': (CommandType.CHANGE_MODE, {}),
            ' ': (CommandType.HOVER, {}),  # –ü—Ä–æ–±–µ–ª –¥–ª—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        }
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = True
        self.input_thread = threading.Thread(target=self._input_worker, daemon=True)
        self.input_thread.start()
        self.logger.info("Keyboard interface started")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\\nüéÆ QIKI Bot Control - Keyboard Interface")
        print("==========================================")
        print("Movement:     W/S/A/D - Forward/Back/Left/Right")
        print("Vertical:     Q/E - Up/Down")
        print("Rotation:     I/K/J/L - Pitch/Turn")
        print("              U/O - Roll Left/Right")
        print("Commands:     H - Hover, R - Reset, X - Emergency Stop")
        print("              M - Change Mode, SPACE - Hover")
        print("==========================================\\n")
    
    def _input_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        try:
            if os.name != 'nt':  # Unix/Linux/Android
                self._unix_input_loop()
            else:  # Windows
                self._windows_input_loop()
        except Exception as e:
            self.logger.error(f"Input worker error: {e}")
    
    def _unix_input_loop(self):
        """–¶–∏–∫–ª –≤–≤–æ–¥–∞ –¥–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º."""
        import select
        import termios
        import tty
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            old_settings = termios.tcgetattr(sys.stdin)
            tty.setraw(sys.stdin.fileno())
            
            while self.running:
                if select.select([sys.stdin], [], [], 0.1)[0]:
                    key = sys.stdin.read(1).lower()
                    self._process_key(key)
                    
        except Exception as e:
            self.logger.error(f"Unix input error: {e}")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            try:
                termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
            except Exception:
                pass
    
    def _windows_input_loop(self):
        """–¶–∏–∫–ª –≤–≤–æ–¥–∞ –¥–ª—è Windows."""
        try:
            import msvcrt
            
            while self.running:
                if msvcrt.kbhit():
                    key = msvcrt.getch().decode('utf-8', errors='ignore').lower()
                    self._process_key(key)
                else:
                    time.sleep(0.05)
                    
        except Exception as e:
            self.logger.error(f"Windows input error: {e}")
    
    def _process_key(self, key: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏."""
        if key in self.key_mapping:
            command_type, params = self.key_mapping[key]
            command = ControlCommand(
                command_type=command_type,
                parameters=params,
                source="keyboard"
            )
            
            # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å
            try:
                loop = asyncio.get_event_loop()
                asyncio.run_coroutine_threadsafe(
                    self.command_queue.put(command), loop
                )
            except Exception as e:
                self.logger.error(f"Error queuing command: {e}")
    
    async def get_command(self) -> Optional[ControlCommand]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        try:
            return await asyncio.wait_for(self.command_queue.get(), timeout=0.001)
        except asyncio.TimeoutError:
            return None
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = False


class TouchInterface(InputInterface):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Android, iOS)."""
    
    def __init__(self):
        self.logger = Logger.get_logger("touch_interface")
        self.command_queue = asyncio.Queue()
        self.running = False
        
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∂–æ–π—Å—Ç–∏–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.joystick_center = (0.0, 0.0)
        self.joystick_deadzone = config.TOUCH_DEADZONE_RADIUS
        self.joystick_sensitivity = config.JOYSTICK_SENSITIVITY
        
        # Android-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.android_mode = config.ANDROID_NO_ROOT_MODE
        self.safe_input_mode = config.ANDROID_SAFE_INPUT_MODE
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        self.touch_modes = {
            'joystick': self._joystick_mode,
            'directional': self._directional_mode,
            'gesture': self._gesture_mode
        }
        self.current_touch_mode = 'joystick' if not self.android_mode else 'directional'
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–Ω—Å–æ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = True
        self.logger.info(f"Touch interface started in {self.current_touch_mode} mode")
        
        if self.android_mode:
            print("\\nüì± QIKI Bot Control - Android Touch Interface (No Root)")
            print("======================================================")
            print("üö´ Root-free mode: Using safe input methods")
            print("üì± Optimized for mobile devices")
            print(f"üéÆ Mode: {self.current_touch_mode}")
        else:
            print("\\nüì± QIKI Bot Control - Touch Interface")
            print("=====================================")
        
        print("Virtual Joystick: Use coordinate input")
        print("Commands: Send via text interface")
        print("Touch modes: joystick, directional, gesture")
        print("=====================================\\n")
    
    def _joystick_mode(self, x: float, y: float, action: str = "move"):
        """–†–µ–∂–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∂–æ–π—Å—Ç–∏–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)."""
        dx = x - self.joystick_center[0]
        dy = y - self.joystick_center[1]
        
        distance = np.sqrt(dx**2 + dy**2)
        
        if distance > self.joystick_deadzone:
            dx_norm = (dx / distance) * min(distance, 1.0) * self.joystick_sensitivity
            dy_norm = (dy / distance) * min(distance, 1.0) * self.joystick_sensitivity
            
            return ControlCommand(
                command_type=CommandType.MOVE_FORWARD,
                parameters={
                    'velocity_x': dx_norm,
                    'velocity_y': dy_norm,
                    'relative': True
                },
                source="touch_joystick"
            )
        return None
    
    def _directional_mode(self, x: float, y: float, action: str = "move"):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è Android)."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if abs(x) > abs(y):
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            if x > 0.5:
                return ControlCommand(
                    command_type=CommandType.MOVE_RIGHT,
                    parameters={},
                    source="touch_directional"
                )
            elif x < -0.5:
                return ControlCommand(
                    command_type=CommandType.MOVE_LEFT,
                    parameters={},
                    source="touch_directional"
                )
        else:
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            if y > 0.5:
                return ControlCommand(
                    command_type=CommandType.MOVE_FORWARD,
                    parameters={},
                    source="touch_directional"
                )
            elif y < -0.5:
                return ControlCommand(
                    command_type=CommandType.MOVE_BACKWARD,
                    parameters={},
                    source="touch_directional"
                )
        return None
    
    def _gesture_mode(self, x: float, y: float, action: str = "move"):
        """–†–µ–∂–∏–º –∂–µ—Å—Ç–æ–≤ (–¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)."""
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∂–µ—Å—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if action == "swipe_up":
            return ControlCommand(CommandType.MOVE_UP, {}, "touch_gesture")
        elif action == "swipe_down":
            return ControlCommand(CommandType.MOVE_DOWN, {}, "touch_gesture")
        elif action == "tap":
            return ControlCommand(CommandType.HOVER, {}, "touch_gesture")
        elif action == "double_tap":
            return ControlCommand(CommandType.EMERGENCY_STOP, {}, "touch_gesture")
        
        # Fallback –∫ –¥–∂–æ–π—Å—Ç–∏–∫—É
        return self._joystick_mode(x, y, action)
    
    async def get_command(self) -> Optional[ControlCommand]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        try:
            return await asyncio.wait_for(self.command_queue.get(), timeout=0.001)
        except asyncio.TimeoutError:
            return None
    
    def process_touch(self, x: float, y: float, action: str = "move"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ–Ω—Å–æ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞."""
        if not self.running:
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        handler = self.touch_modes.get(self.current_touch_mode, self._joystick_mode)
        command = handler(x, y, action)
        
        if command:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            try:
                loop = asyncio.get_event_loop()
                asyncio.run_coroutine_threadsafe(
                    self.command_queue.put(command), loop
                )
                
                if self.android_mode:
                    self.logger.debug(f"Android touch: {action} at ({x:.2f}, {y:.2f}) -> {command.command_type.name}")
                
            except Exception as e:
                self.logger.error(f"Error queuing touch command: {e}")
    
    def set_touch_mode(self, mode: str):
        """–ú–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        if mode in self.touch_modes:
            self.current_touch_mode = mode
            self.logger.info(f"Touch mode changed to: {mode}")
            return True
        return False
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = False


class TextInterface(InputInterface):
    """–¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)."""
    
    def __init__(self):
        self.logger = Logger.get_logger("text_interface")
        self.command_queue = asyncio.Queue()
        self.running = False
        self.input_thread = None
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.text_commands = {
            # –î–≤–∏–∂–µ–Ω–∏–µ
            'forward': (CommandType.MOVE_FORWARD, {}),
            'backward': (CommandType.MOVE_BACKWARD, {}),
            'left': (CommandType.MOVE_LEFT, {}),
            'right': (CommandType.MOVE_RIGHT, {}),
            'up': (CommandType.MOVE_UP, {}),
            'down': (CommandType.MOVE_DOWN, {}),
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            'hover': (CommandType.HOVER, {}),
            'land': (CommandType.LAND, {}),
            'reset': (CommandType.RESET_POSITION, {}),
            'stop': (CommandType.EMERGENCY_STOP, {}),
            'emergency': (CommandType.EMERGENCY_STOP, {}),
            
            # –†–µ–∂–∏–º—ã
            'auto': (CommandType.CHANGE_MODE, {'mode': ControlMode.AUTONOMOUS}),
            'manual': (CommandType.CHANGE_MODE, {'mode': ControlMode.MANUAL}),
            'assisted': (CommandType.CHANGE_MODE, {'mode': ControlMode.ASSISTED}),
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            'goto': (CommandType.GOTO_POSITION, {}),  # –¢—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        }
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = True
        self.input_thread = threading.Thread(target=self._input_worker, daemon=True)
        self.input_thread.start()
        self.logger.info("Text interface started")
        
        print("\\nüí¨ QIKI Bot Control - Text Interface")
        print("====================================")
        print("Commands: forward, backward, left, right, up, down")
        print("          hover, land, reset, stop, emergency")
        print("          auto, manual, assisted")
        print("          goto x y z (e.g., 'goto 10 5 15')")
        print("          help - show this help")
        print("====================================\\n")
    
    def _input_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞."""
        while self.running:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                user_input = input("QIKI> ").strip().lower()
                if user_input:
                    self._process_text_command(user_input)
            except (EOFError, KeyboardInterrupt):
                break
            except Exception as e:
                self.logger.error(f"Text input error: {e}")
    
    def _process_text_command(self, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É."""
        parts = text.split()
        if not parts:
            return
        
        command_name = parts[0]
        
        if command_name == 'help':
            self._show_help()
            return
        
        if command_name in self.text_commands:
            command_type, base_params = self.text_commands[command_name]
            params = base_params.copy()
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã goto
            if command_name == 'goto' and len(parts) >= 4:
                try:
                    x, y, z = float(parts[1]), float(parts[2]), float(parts[3])
                    params['position'] = np.array([x, y, z])
                except ValueError:
                    print("Error: goto requires three numbers (x y z)")
                    return
            elif command_name == 'goto':
                print("Usage: goto x y z")
                return
            
            command = ControlCommand(
                command_type=command_type,
                parameters=params,
                source="text"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å
            try:
                loop = asyncio.get_event_loop()
                asyncio.run_coroutine_threadsafe(
                    self.command_queue.put(command), loop
                )
                print(f"Command executed: {command_name}")
            except Exception as e:
                self.logger.error(f"Error queuing text command: {e}")
        else:
            print(f"Unknown command: {command_name}. Type 'help' for available commands.")
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        print("\\nAvailable commands:")
        print("  Movement: forward, backward, left, right, up, down")
        print("  Actions:  hover, land, reset, stop, emergency")
        print("  Modes:    auto, manual, assisted")
        print("  Navigate: goto x y z")
        print("  System:   help")
        print()
    
    async def get_command(self) -> Optional[ControlCommand]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        try:
            return await asyncio.wait_for(self.command_queue.get(), timeout=0.001)
        except asyncio.TimeoutError:
            return None
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = False


class AndroidSafeInterface(InputInterface):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Android –±–µ–∑ root –ø—Ä–∞–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–≤–æ–¥–∞ Python.
    """
    
    def __init__(self):
        self.logger = Logger.get_logger("android_safe_interface")
        self.command_queue = asyncio.Queue()
        self.running = False
        self.input_thread = None
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Android (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
        self.android_commands = {
            # –î–≤–∏–∂–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã)
            '1': (CommandType.MOVE_FORWARD, {}),
            '2': (CommandType.MOVE_BACKWARD, {}),
            '3': (CommandType.MOVE_LEFT, {}),
            '4': (CommandType.MOVE_RIGHT, {}),
            '5': (CommandType.MOVE_UP, {}),
            '6': (CommandType.MOVE_DOWN, {}),
            
            # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
            '7': (CommandType.HOVER, {}),
            '8': (CommandType.LAND, {}),
            '9': (CommandType.EMERGENCY_STOP, {}),
            '0': (CommandType.RESET_POSITION, {}),
            
            # –†–µ–∂–∏–º—ã (–±—É–∫–≤—ã)
            'a': (CommandType.CHANGE_MODE, {'mode': ControlMode.AUTONOMOUS}),
            'm': (CommandType.CHANGE_MODE, {'mode': ControlMode.MANUAL}),
            's': (CommandType.CHANGE_MODE, {'mode': ControlMode.ASSISTED}),
        }
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Android-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = True
        self.input_thread = threading.Thread(target=self._safe_input_worker, daemon=True)
        self.input_thread.start()
        self.logger.info("Android safe interface started")
        
        print("\\nü§ñ QIKI Bot Control - Android Safe Mode (No Root Required)")
        print("==========================================================")
        print("üî¢ Movement: 1=Forward 2=Back 3=Left 4=Right 5=Up 6=Down")
        print("‚ö° Quick:    7=Hover 8=Land 9=STOP 0=Reset")
        print("üéÆ Modes:    a=Auto m=Manual s=Assisted")
        print("‚úÖ Root-free: Works on any Android device")
        print("==========================================================\\n")
    
    def _safe_input_worker(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è Android."""
        while self.running:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π input() –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
                user_input = input("QIKI-Android> ").strip().lower()
                
                if user_input in self.android_commands:
                    command_type, params = self.android_commands[user_input]
                    command = ControlCommand(
                        command_type=command_type,
                        parameters=params,
                        source="android_safe"
                    )
                    
                    # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å
                    try:
                        loop = asyncio.get_event_loop()
                        asyncio.run_coroutine_threadsafe(
                            self.command_queue.put(command), loop
                        )
                        print(f"‚úÖ Command: {command_type.name}")
                    except Exception as e:
                        self.logger.error(f"Error queuing Android command: {e}")
                
                elif user_input == 'help' or user_input == 'h':
                    self._show_help()
                
                elif user_input in ['exit', 'quit', 'q']:
                    break
                    
                elif user_input:
                    print(f"‚ùå Unknown command: {user_input}. Type 'help' for commands.")
                    
            except (EOFError, KeyboardInterrupt):
                break
            except Exception as e:
                self.logger.error(f"Android safe input error: {e}")
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        print("\\nüìñ QIKI Android Commands Help")
        print("=============================")
        print("Movement Controls:")
        print("  1 - Move Forward    2 - Move Backward")
        print("  3 - Move Left       4 - Move Right")
        print("  5 - Move Up         6 - Move Down")
        print("\\nQuick Actions:")
        print("  7 - Hover in place  8 - Land")
        print("  9 - Emergency STOP  0 - Reset position")
        print("\\nControl Modes:")
        print("  a - Autonomous mode m - Manual mode")
        print("  s - Assisted mode")
        print("\\nSystem:")
        print("  help/h - Show this help")
        print("  exit/quit/q - Exit interface")
        print("=============================\\n")
    
    async def get_command(self) -> Optional[ControlCommand]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        try:
            return await asyncio.wait_for(self.command_queue.get(), timeout=0.001)
        except asyncio.TimeoutError:
            return None
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.running = False


class BotController:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–≤–æ–¥–∞ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç–æ–º.
    """
    
    def __init__(self, agent=None, physics=None):
        self.logger = Logger.get_logger("bot_controller")
        self.agent = agent
        self.physics = physics
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_state = ControlState()
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–≤–æ–¥–∞
        self.interfaces: List[InputInterface] = []
        self.active_interfaces: List[InputInterface] = []
        
        # –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        self.command_queue = asyncio.PriorityQueue()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.movement_speed = config.AGENT_SPEED_FACTOR
        self.rotation_speed = config.AGENT_ROTATION_SPEED
        self.control_sensitivity = config.BOT_CONTROL_SENSITIVITY
        
        # Android-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.android_no_root = config.ANDROID_NO_ROOT_MODE
        self.android_safe_input = config.ANDROID_SAFE_INPUT_MODE
        self.mobile_friendly = config.MOBILE_FRIENDLY_UI
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.command_history = []
        
        self.logger.info("BotController initialized")
    
    def add_interface(self, interface: InputInterface):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞."""
        self.interfaces.append(interface)
        self.logger.info(f"Added interface: {interface.__class__.__name__}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        self._detect_and_add_interfaces()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        for interface in self.interfaces:
            try:
                await interface.start()
                self.active_interfaces.append(interface)
            except Exception as e:
                self.logger.warning(f"Failed to start interface {interface.__class__.__name__}: {e}")
        
        self.logger.info(f"BotController started with {len(self.active_interfaces)} active interfaces")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        asyncio.create_task(self._command_processing_loop())
    
    def _detect_and_add_interfaces(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        is_android = self._is_android_environment()
        is_mobile = self._is_mobile_environment()
        is_desktop = self._is_desktop_environment()
        
        # –õ–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        platform_info = []
        if is_android:
            platform_info.append("Android")
        if is_mobile:
            platform_info.append("Mobile")
        if is_desktop:
            platform_info.append("Desktop")
        
        self.logger.info(f"Platform detected: {', '.join(platform_info) if platform_info else 'Unknown'}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π Android-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ root
        if is_android and self.android_no_root:
            try:
                self.add_interface(AndroidSafeInterface())
                self.logger.info("Added Android safe interface (no root required)")
            except Exception as e:
                self.logger.warning(f"Could not add Android safe interface: {e}")
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ –Ω–∞ Android –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        if not (is_android and self.android_no_root):
            self.add_interface(TextInterface())
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ (–Ω–µ –Ω–∞ Android –±–µ–∑ root)
        if is_desktop and not (is_android and self.android_no_root):
            try:
                self.add_interface(KeyboardInterface())
            except Exception as e:
                self.logger.warning(f"Could not add keyboard interface: {e}")
        
        # –°–µ–Ω—Å–æ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–Ω–µ Android –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        if (is_mobile or is_android) and not (is_android and self.android_no_root):
            try:
                touch_interface = TouchInterface()
                if is_android:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è Android
                    touch_interface.set_touch_mode('directional')
                self.add_interface(touch_interface)
            except Exception as e:
                self.logger.warning(f"Could not add touch interface: {e}")
        
        # Fallback: –µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π
        if not self.interfaces:
            self.logger.warning("No interfaces detected, adding text interface as fallback")
            self.add_interface(TextInterface())
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Android –±–µ–∑ root
        if is_android and self.android_no_root:
            try:
                self.add_interface(AndroidSafeInterface())
            except Exception as e:
                self.logger.warning(f"Could not add Android safe interface: {e}")
    
    def _is_android_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ —Å—Ä–µ–¥–µ Android."""
        return (
            'ANDROID_ROOT' in os.environ or 
            'ANDROID_DATA' in os.environ or
            'ANDROID_STORAGE' in os.environ or
            sys.platform.startswith('android') or
            os.path.exists('/system/build.prop') or
            os.path.exists('/system/app')
        )
    
    def _is_desktop_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π —Å—Ä–µ–¥–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if os.name == 'nt':  # Windows
                try:
                    import importlib.util
                    if importlib.util.find_spec("msvcrt"):
                        return True
                except ImportError:
                    pass
                return False
            else:  # Unix/Linux
                try:
                    import importlib.util
                    if (importlib.util.find_spec("termios") and 
                        importlib.util.find_spec("tty")):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stdin - —ç—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
                        return hasattr(sys.stdin, 'fileno') and os.isatty(sys.stdin.fileno())
                except (ImportError, OSError):
                    pass
                return False
        except Exception as e:
            self.logger.debug(f"Desktop detection error: {e}")
            return False
    
    def _is_mobile_environment(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        mobile_indicators = [
            # Android
            'ANDROID_ROOT' in os.environ,
            'ANDROID_DATA' in os.environ,
            sys.platform.startswith('android'),
            # iOS (–µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
            'IPHONEOS_DEPLOYMENT_TARGET' in os.environ,
            # –û–±—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö
            'MOBILE' in os.environ.get('USER_AGENT', ''),
            # –ü—É—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            os.path.exists('/sdcard'),
            os.path.exists('/system/framework'),
        ]
        
        return any(mobile_indicators)
    
    async def _command_processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥."""
        while True:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
                for interface in self.active_interfaces:
                    command = await interface.get_command()
                    if command:
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                        await self.command_queue.put((command.priority, time.time(), command))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                if not self.command_queue.empty():
                    _, _, command = await asyncio.wait_for(
                        self.command_queue.get(), timeout=0.001
                    )
                    await self._execute_command(command)
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(0.01)
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                self.logger.error(f"Command processing error: {e}")
                await asyncio.sleep(0.1)
    
    async def _execute_command(self, command: ControlCommand):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.logger.debug(f"Executing command: {command.command_type.name} from {command.source}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.command_history.append(command)
        if len(self.command_history) > 100:
            self.command_history.pop(0)
        
        try:
            if command.command_type == CommandType.EMERGENCY_STOP:
                await self._emergency_stop()
            
            elif command.command_type == CommandType.CHANGE_MODE:
                mode = command.parameters.get('mode', ControlMode.MANUAL)
                self._change_control_mode(mode)
            
            elif command.command_type in [
                CommandType.MOVE_FORWARD, CommandType.MOVE_BACKWARD,
                CommandType.MOVE_LEFT, CommandType.MOVE_RIGHT,
                CommandType.MOVE_UP, CommandType.MOVE_DOWN
            ]:
                await self._execute_movement_command(command)
            
            elif command.command_type in [
                CommandType.TURN_LEFT, CommandType.TURN_RIGHT,
                CommandType.PITCH_UP, CommandType.PITCH_DOWN,
                CommandType.ROLL_LEFT, CommandType.ROLL_RIGHT
            ]:
                await self._execute_rotation_command(command)
            
            elif command.command_type == CommandType.GOTO_POSITION:
                await self._goto_position(command.parameters.get('position'))
            
            elif command.command_type == CommandType.HOVER:
                await self._hover()
            
            elif command.command_type == CommandType.RESET_POSITION:
                await self._reset_position()
            
            else:
                self.logger.warning(f"Unhandled command type: {command.command_type.name}")
        
        except Exception as e:
            self.logger.error(f"Error executing command {command.command_type.name}: {e}")
    
    async def _execute_movement_command(self, command: ControlCommand):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–≤–∏–∂–µ–Ω–∏—è."""
        if not self.agent:
            return
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        direction_map = {
            CommandType.MOVE_FORWARD: np.array([1.0, 0.0, 0.0]),
            CommandType.MOVE_BACKWARD: np.array([-1.0, 0.0, 0.0]),
            CommandType.MOVE_LEFT: np.array([0.0, 1.0, 0.0]),
            CommandType.MOVE_RIGHT: np.array([0.0, -1.0, 0.0]),
            CommandType.MOVE_UP: np.array([0.0, 0.0, 1.0]),
            CommandType.MOVE_DOWN: np.array([0.0, 0.0, -1.0]),
        }
        
        direction = direction_map.get(command.command_type, np.zeros(3))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        velocity = direction * self.movement_speed
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if command.parameters.get('relative', False):
            # –î–ª—è —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            velocity[0] = command.parameters.get('velocity_x', velocity[0])
            velocity[1] = command.parameters.get('velocity_y', velocity[1])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        if hasattr(self.agent, 'target_velocity'):
            self.agent.target_velocity = velocity
        
        self.control_state.thrust_vector = velocity
        self.control_state.last_command_time = time.time()
    
    async def _execute_rotation_command(self, command: ControlCommand):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤—Ä–∞—â–µ–Ω–∏—è."""
        if not self.agent:
            return
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        rotation_map = {
            CommandType.TURN_LEFT: np.array([0.0, 0.0, 1.0]),
            CommandType.TURN_RIGHT: np.array([0.0, 0.0, -1.0]),
            CommandType.PITCH_UP: np.array([0.0, 1.0, 0.0]),
            CommandType.PITCH_DOWN: np.array([0.0, -1.0, 0.0]),
            CommandType.ROLL_LEFT: np.array([1.0, 0.0, 0.0]),
            CommandType.ROLL_RIGHT: np.array([-1.0, 0.0, 0.0]),
        }
        
        rotation = rotation_map.get(command.command_type, np.zeros(3))
        angular_velocity = rotation * self.rotation_speed
        
        self.control_state.torque_vector = angular_velocity
        self.control_state.last_command_time = time.time()
    
    async def _goto_position(self, position: Optional[np.ndarray]):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏."""
        if position is not None and self.agent:
            self.agent.target = position
            self.control_state.target_position = position
            self.logger.info(f"Moving to position: {position}")
    
    async def _hover(self):
        """–ó–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏."""
        if self.agent and self.physics:
            current_pos = self.physics.get_state().position
            self.agent.target = current_pos
            self.control_state.target_position = current_pos
            self.logger.info("Hovering at current position")
    
    async def _reset_position(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
        reset_pos = np.array([0.0, 0.0, 5.0])  # 5 –º–µ—Ç—Ä–æ–≤ –Ω–∞–¥ –∑–µ–º–ª–µ–π
        await self._goto_position(reset_pos)
        self.logger.info("Position reset to origin")
    
    async def _emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞."""
        self.control_state.emergency_stop = True
        if self.agent:
            self.agent.emergency_stop = True
        
        # –û–±–Ω—É–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        self.control_state.thrust_vector = np.zeros(3)
        self.control_state.torque_vector = np.zeros(3)
        
        self.logger.warning("EMERGENCY STOP ACTIVATED")
    
    def _change_control_mode(self, mode: ControlMode):
        """–ú–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.control_state.mode = mode
        if self.agent:
            self.agent.autonomous = (mode == ControlMode.AUTONOMOUS)
        
        self.logger.info(f"Control mode changed to: {mode.name}")
    
    def get_control_state(self) -> ControlState:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        return self.control_state
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä."""
        for interface in self.active_interfaces:
            interface.stop()
        self.logger.info("BotController stopped")
