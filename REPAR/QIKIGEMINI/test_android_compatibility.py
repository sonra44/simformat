#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –¥–ª—è Android
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_config_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    try:
        from config import config
        print("‚úÖ Config imported successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        assert hasattr(config, 'AGENT_SPEED_FACTOR'), "AGENT_SPEED_FACTOR missing"
        assert hasattr(config, 'AGENT_ROTATION_SPEED'), "AGENT_ROTATION_SPEED missing"
        assert hasattr(config, 'ANDROID_NO_ROOT_MODE'), "ANDROID_NO_ROOT_MODE missing"
        
        print(f"‚úÖ AGENT_SPEED_FACTOR: {config.AGENT_SPEED_FACTOR}")
        print(f"‚úÖ ANDROID_NO_ROOT_MODE: {config.ANDROID_NO_ROOT_MODE}")
        return True
    except Exception as e:
        print(f"‚ùå Config import failed: {e}")
        return False

def test_bot_control_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."""
    try:
        from bot_control import BotController, AndroidSafeInterface, ControlCommand, CommandType
        print("‚úÖ Bot control imported successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        assert BotController is not None, "BotController not available"
        assert AndroidSafeInterface is not None, "AndroidSafeInterface not available"
        
        print("‚úÖ All bot control classes available")
        return True
    except Exception as e:
        print(f"‚ùå Bot control import failed: {e}")
        return False

def test_android_interface():
    """–¢–µ—Å—Ç Android –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    try:
        from bot_control import AndroidSafeInterface
        
        interface = AndroidSafeInterface()
        print("‚úÖ AndroidSafeInterface created successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        assert hasattr(interface, 'android_commands'), "android_commands missing"
        assert len(interface.android_commands) > 0, "No Android commands defined"
        
        print(f"‚úÖ Android commands available: {len(interface.android_commands)}")
        return True
    except Exception as e:
        print(f"‚ùå Android interface test failed: {e}")
        return False

def test_platform_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    try:
        from bot_control import BotController
        
        controller = BotController()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        android_detected = controller._is_android_environment()
        mobile_detected = controller._is_mobile_environment()
        desktop_detected = controller._is_desktop_environment()
        
        print(f"‚úÖ Platform detection:")
        print(f"   Android: {android_detected}")
        print(f"   Mobile: {mobile_detected}")
        print(f"   Desktop: {desktop_detected}")
        
        return True
    except Exception as e:
        print(f"‚ùå Platform detection test failed: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("ü§ñ QIKI Bot Control - Android Compatibility Test")
    print("=" * 50)
    
    tests = [
        ("Config Import", test_config_import),
        ("Bot Control Import", test_bot_control_import),
        ("Android Interface", test_android_interface),
        ("Platform Detection", test_platform_detection),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã Running: {test_name}")
        print("-" * 30)
        if test_func():
            passed += 1
        
    print("\n" + "=" * 50)
    print(f"üìä TEST RESULTS: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Android compatibility ready.")
        return 0
    else:
        print("‚ö†Ô∏è Some tests failed. Check the output above.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
