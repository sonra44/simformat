#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º QIKI
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import asyncio
import sys
import os
import time
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot_control import BotController, ControlCommand, CommandType, ControlMode
from qiki_bot_control_integration import QikiBotControlIntegration
from logger import Logger


class MockAgent:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    def __init__(self):
        self.target = np.array([0.0, 0.0, 5.0])
        self.autonomous = True
        self.emergency_stop = False


class MockPhysics:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç —Ñ–∏–∑–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    def __init__(self):
        self.position = np.array([0.0, 0.0, 5.0])
        self.velocity = np.array([0.0, 0.0, 0.0])
        self.mass = 10.0
        self.forces = []
        self.torques = []
    
    def get_state(self):
        class State:
            def __init__(self, pos, vel):
                self.position = pos
                self.velocity = vel
        return State(self.position, self.velocity)
    
    def apply_force(self, force):
        self.forces.append(force)
        print(f"Applied force: {force}")
    
    def apply_torque(self, torque):
        self.torques.append(torque)
        print(f"Applied torque: {torque}")


async def test_bot_controller():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å BotController."""
    print("üß™ Testing BotController...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    mock_agent = MockAgent()
    mock_physics = MockPhysics()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    controller = BotController(agent=mock_agent, physics=mock_physics)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        await controller.start()
        print("‚úÖ BotController started successfully")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        test_commands = [
            ControlCommand(CommandType.MOVE_FORWARD, source="test"),
            ControlCommand(CommandType.TURN_LEFT, source="test"),
            ControlCommand(CommandType.HOVER, source="test"),
            ControlCommand(CommandType.GOTO_POSITION, {"position": np.array([10, 5, 15])}, source="test"),
        ]
        
        for cmd in test_commands:
            await controller.command_queue.put((cmd.priority, time.time(), cmd))
            print(f"‚úÖ Queued command: {cmd.command_type.name}")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
        await asyncio.sleep(1.0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = controller.get_control_state()
        print(f"‚úÖ Control state: {state.mode.name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå BotController test failed: {e}")
        return False
    finally:
        controller.stop()


async def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π."""
    print("üß™ Testing QikiBotControlIntegration...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    mock_agent = MockAgent()
    mock_physics = MockPhysics()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    integration = QikiBotControlIntegration(
        agent=mock_agent, 
        physics=mock_physics, 
        simulation=None
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        await integration.start()
        print("‚úÖ Integration started successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = integration.get_control_status()
        print(f"‚úÖ Control status: {status}")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await asyncio.sleep(2.0)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        return False
    finally:
        integration.stop()


def test_platform_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    print("üß™ Testing platform detection...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        controller = BotController()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        is_desktop = controller._is_desktop_environment()
        is_mobile = controller._is_mobile_environment()
        
        print(f"‚úÖ Desktop environment: {is_desktop}")
        print(f"‚úÖ Mobile environment: {is_mobile}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Android
        android_vars = ['ANDROID_ROOT', 'ANDROID_DATA']
        android_detected = any(var in os.environ for var in android_vars)
        print(f"‚úÖ Android environment variables: {android_detected}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º sys.platform
        print(f"‚úÖ Platform: {sys.platform}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Platform detection test failed: {e}")
        return False


def test_command_types():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥."""
    print("üß™ Testing command types...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥
        command_types = list(CommandType)
        print(f"‚úÖ Available command types: {len(command_types)}")
        
        for cmd_type in command_types:
            print(f"  - {cmd_type.name}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        test_commands = [
            ControlCommand(CommandType.MOVE_FORWARD),
            ControlCommand(CommandType.EMERGENCY_STOP, priority=0),
            ControlCommand(CommandType.GOTO_POSITION, {"position": np.array([1, 2, 3])}),
        ]
        
        for cmd in test_commands:
            print(f"‚úÖ Created command: {cmd.command_type.name}, priority: {cmd.priority}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Command types test failed: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ QIKI Bot Control System Test Suite")
    print("=" * 50)
    
    tests = [
        ("Platform Detection", test_platform_detection),
        ("Command Types", test_command_types),
        ("Bot Controller", test_bot_controller),
        ("Integration", test_integration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\\nüìã Running: {test_name}")
        print("-" * 30)
        
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Test {test_name} crashed: {e}")
            results.append((test_name, False))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\\n" + "=" * 50)
    print("üìä TEST RESULTS")
    print("=" * 50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1
    
    print(f"\\nüìà Summary: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("üéâ All tests passed! Bot control system is ready.")
        return 0
    else:
        print("‚ö†Ô∏è  Some tests failed. Check the output above.")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\\nüõë Tests interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\\nüí• Test suite crashed: {e}")
        sys.exit(1)
